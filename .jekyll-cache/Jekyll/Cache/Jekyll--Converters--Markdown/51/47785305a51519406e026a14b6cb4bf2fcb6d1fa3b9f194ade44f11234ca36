I"&<h1 id="so-">So …</h1>

<p>I’ve been writing quite a bit of code of late (and certainly no blog posts). I’ve been focusing on getting my display update code as efficient as possible. So I wanted to examine my code to see what the space/time trade-off was in terms of memory consumption and  number of processor cycles used.</p>

<p>I talked a little about space/time trade-offs in an <a href="/lets-talk-about-the-zx-specrum-screen-layout-part-three/">earlier post on calculating screen positions</a>, in that post I manually calculated the t-states using a document I found online.</p>

<p>When I was writing <a href="/Spectrum-development-then-and-now/">production Z80 code</a> my old assembler (OCP’s Full screen editor assembler) used to be able to output the information that I needed as part of the assembly process.  A quick look at my current tooling shows it doesn’t give me the functionality I need.</p>

<h2 id="of-course-then-">Of course then …</h2>

<p>I went to work and wrote an <a href="../tstates">online z80 t-state analyser</a>.</p>

<p>I have included as many of the undocumented Z80 instructions that I am aware of and have run it against several large online code bases (manic miner etc) and it handles them without issues.</p>

<div class="dbImg centeredImg zoom50" data-src="t-stating.png"></div>

<p>It’s easy to use, paste in your z80 assembly code and it’ll automatically process it. <a href="../tstates">Give it a go</a> and let me know if it’s  of any use (If you see any red lines, please let me know as that’s an unrecognised instruction).</p>

<p>I’m looking to extend the app to produce syntax highlighted code with t-states for use in blogs and articles. if you think that’s a decent idea, or have features you’d like to see then contact me via twitter or discord.</p>

:ET